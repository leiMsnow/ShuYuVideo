package com.shuyu.video.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shuyu.video.model.Payment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAYMENT".
*/
public class PaymentDao extends AbstractDao<Payment, Long> {

    public static final String TABLENAME = "PAYMENT";

    /**
     * Properties of entity Payment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property PayType = new Property(2, int.class, "payType", false, "PAY_TYPE");
        public final static Property PayCompanyCode = new Property(3, String.class, "payCompanyCode", false, "PAY_COMPANY_CODE");
        public final static Property PayCode = new Property(4, String.class, "payCode", false, "PAY_CODE");
        public final static Property PayBean = new Property(5, String.class, "payBean", false, "PAY_BEAN");
        public final static Property PartnerId = new Property(6, String.class, "partnerId", false, "PARTNER_ID");
        public final static Property Md5Key = new Property(7, String.class, "md5Key", false, "MD5_KEY");
        public final static Property NotifyUrl1 = new Property(8, String.class, "notifyUrl1", false, "NOTIFY_URL1");
        public final static Property NotifyUrl2 = new Property(9, String.class, "notifyUrl2", false, "NOTIFY_URL2");
        public final static Property Remark = new Property(10, String.class, "remark", false, "REMARK");
    };


    public PaymentDao(DaoConfig config) {
        super(config);
    }
    
    public PaymentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"PAY_TYPE\" INTEGER NOT NULL ," + // 2: payType
                "\"PAY_COMPANY_CODE\" TEXT," + // 3: payCompanyCode
                "\"PAY_CODE\" TEXT," + // 4: payCode
                "\"PAY_BEAN\" TEXT," + // 5: payBean
                "\"PARTNER_ID\" TEXT," + // 6: partnerId
                "\"MD5_KEY\" TEXT," + // 7: md5Key
                "\"NOTIFY_URL1\" TEXT," + // 8: notifyUrl1
                "\"NOTIFY_URL2\" TEXT," + // 9: notifyUrl2
                "\"REMARK\" TEXT);"); // 10: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Payment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getPayType());
 
        String payCompanyCode = entity.getPayCompanyCode();
        if (payCompanyCode != null) {
            stmt.bindString(4, payCompanyCode);
        }
 
        String payCode = entity.getPayCode();
        if (payCode != null) {
            stmt.bindString(5, payCode);
        }
 
        String payBean = entity.getPayBean();
        if (payBean != null) {
            stmt.bindString(6, payBean);
        }
 
        String partnerId = entity.getPartnerId();
        if (partnerId != null) {
            stmt.bindString(7, partnerId);
        }
 
        String md5Key = entity.getMd5Key();
        if (md5Key != null) {
            stmt.bindString(8, md5Key);
        }
 
        String notifyUrl1 = entity.getNotifyUrl1();
        if (notifyUrl1 != null) {
            stmt.bindString(9, notifyUrl1);
        }
 
        String notifyUrl2 = entity.getNotifyUrl2();
        if (notifyUrl2 != null) {
            stmt.bindString(10, notifyUrl2);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Payment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getPayType());
 
        String payCompanyCode = entity.getPayCompanyCode();
        if (payCompanyCode != null) {
            stmt.bindString(4, payCompanyCode);
        }
 
        String payCode = entity.getPayCode();
        if (payCode != null) {
            stmt.bindString(5, payCode);
        }
 
        String payBean = entity.getPayBean();
        if (payBean != null) {
            stmt.bindString(6, payBean);
        }
 
        String partnerId = entity.getPartnerId();
        if (partnerId != null) {
            stmt.bindString(7, partnerId);
        }
 
        String md5Key = entity.getMd5Key();
        if (md5Key != null) {
            stmt.bindString(8, md5Key);
        }
 
        String notifyUrl1 = entity.getNotifyUrl1();
        if (notifyUrl1 != null) {
            stmt.bindString(9, notifyUrl1);
        }
 
        String notifyUrl2 = entity.getNotifyUrl2();
        if (notifyUrl2 != null) {
            stmt.bindString(10, notifyUrl2);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Payment readEntity(Cursor cursor, int offset) {
        Payment entity = new Payment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getInt(offset + 2), // payType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // payCompanyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // payCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // payBean
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // partnerId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // md5Key
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // notifyUrl1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // notifyUrl2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Payment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPayType(cursor.getInt(offset + 2));
        entity.setPayCompanyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPayCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPayBean(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPartnerId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMd5Key(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNotifyUrl1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNotifyUrl2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRemark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Payment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Payment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
