package com.shuyu.video.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shuyu.video.model.AppPayInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_PAY_INFO".
*/
public class AppPayInfoDao extends AbstractDao<AppPayInfo, Long> {

    public static final String TABLENAME = "APP_PAY_INFO";

    /**
     * Properties of entity AppPayInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SpreePrice = new Property(1, int.class, "spreePrice", false, "SPREE_PRICE");
        public final static Property MemberPrice = new Property(2, int.class, "memberPrice", false, "MEMBER_PRICE");
        public final static Property VipPrice = new Property(3, int.class, "vipPrice", false, "VIP_PRICE");
        public final static Property SvipPrice = new Property(4, int.class, "svipPrice", false, "SVIP_PRICE");
        public final static Property Rebate = new Property(5, int.class, "rebate", false, "REBATE");
    };


    public AppPayInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppPayInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_PAY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SPREE_PRICE\" INTEGER NOT NULL ," + // 1: spreePrice
                "\"MEMBER_PRICE\" INTEGER NOT NULL ," + // 2: memberPrice
                "\"VIP_PRICE\" INTEGER NOT NULL ," + // 3: vipPrice
                "\"SVIP_PRICE\" INTEGER NOT NULL ," + // 4: svipPrice
                "\"REBATE\" INTEGER NOT NULL );"); // 5: rebate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_PAY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppPayInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSpreePrice());
        stmt.bindLong(3, entity.getMemberPrice());
        stmt.bindLong(4, entity.getVipPrice());
        stmt.bindLong(5, entity.getSvipPrice());
        stmt.bindLong(6, entity.getRebate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppPayInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSpreePrice());
        stmt.bindLong(3, entity.getMemberPrice());
        stmt.bindLong(4, entity.getVipPrice());
        stmt.bindLong(5, entity.getSvipPrice());
        stmt.bindLong(6, entity.getRebate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppPayInfo readEntity(Cursor cursor, int offset) {
        AppPayInfo entity = new AppPayInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // spreePrice
            cursor.getInt(offset + 2), // memberPrice
            cursor.getInt(offset + 3), // vipPrice
            cursor.getInt(offset + 4), // svipPrice
            cursor.getInt(offset + 5) // rebate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppPayInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpreePrice(cursor.getInt(offset + 1));
        entity.setMemberPrice(cursor.getInt(offset + 2));
        entity.setVipPrice(cursor.getInt(offset + 3));
        entity.setSvipPrice(cursor.getInt(offset + 4));
        entity.setRebate(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppPayInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppPayInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
